var searchIndex = JSON.parse('{\
"biommap":{"doc":"Ar efficient bioinformatics file parser based on memory …","t":[17,0,0,14,14,14,0,3,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,0],"n":["DEFAULT_BLOCKSIZE","block","error","impl_producer","impl_reader","impl_sequential","parser","Block","borrow","borrow_mut","data","fmt","from","into","is_empty","len","new","try_from","try_into","type_id","Error","MapFile","MetaDataFile","NoNewLineInBlock","NotAFastaFile","NotAFastqFile","OpenFile","PartialRecord","Result","borrow","borrow_mut","fmt","fmt","from","into","provide","source","to_string","try_from","try_into","type_id","source","source","source","sequential"],"q":["biommap","","","","","","","biommap::block","","","","","","","","","","","","","biommap::error","","","","","","","","","","","","","","","","","","","","","biommap::error::Error","","","biommap::parser"],"d":["Define default blocksize","Struct that extract part of file (called block) and read …","Error struct of project biommap","Macro that generate a Block Producer struct.","Macro that generate a Reader struct.","Macro to generate a sequential parser","Module contains macro to generate some default parser.","Block reperesent a section of file memory mapped in file","","","Acces to data owned by block","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Return true if the block is empty","Get length of block","Create a new Block","","","","Enum to manage error","Can’t map file in memory","Missing metadata file","biommap didn’t find a new line in block, extend block …","File seems not containts fasta data","File seems not containts fastq data","Can’t open file","Current record seems to be a partial record","Alias of result","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Original error","Original error","Original error","Module provide a macro to run a sequential parsing of file"],"i":[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,14,15,16,0],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[1],[[1,2],3],[[]],[[]],[1,4],[1,5],[[5,6],1],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,[[]],[[]],[[9,2],3],[[9,2],3],[[]],[[]],[10],[9,[[12,[11]]]],[[],13],[[],7],[[],7],[[],8],0,0,0,0],"p":[[3,"Block"],[3,"Formatter"],[6,"Result"],[15,"bool"],[15,"usize"],[3,"Mmap"],[4,"Result"],[3,"TypeId"],[4,"Error"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[13,"MetaDataFile"],[13,"OpenFile"],[13,"MapFile"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
