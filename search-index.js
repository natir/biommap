var searchIndex = JSON.parse('{\
"biommap":{"doc":"Ar efficient bioinformatics file parser based on memory …","t":[17,0,0,0,0,14,14,3,11,11,11,11,11,11,11,11,11,11,11,11,4,13,13,13,13,13,13,13,6,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,3,3,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,3,3,3,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,11,11,11,11,11,11,11,11,11],"n":["DEFAULT_BLOCKSIZE","block","error","fasta","fastq","impl_producer","impl_reader","Block","borrow","borrow_mut","data","fmt","from","into","is_empty","len","new","try_from","try_into","type_id","Error","MapFile","MetaDataFile","NoNewLineInBlock","NotAFastaFile","NotAFastqFile","OpenFile","PartialRecord","Result","borrow","borrow_mut","fmt","fmt","from","into","provide","source","to_string","try_from","try_into","type_id","source","source","source","Producer","Reader","Record","blocksize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","comment","correct_block_size","file","file_length","filesize","fix_blocksize","from","from","from","get_line","into","into","into","into_iter","new","new","next","next_block","next_record","offset","sequence","set_offset","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_blocksize","Producer","Reader","Record","blocksize","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","comment","correct_block_size","file","file_length","filesize","fix_blocksize","from","from","from","get_line","into","into","into","into_iter","new","new","next","next_block","next_record","offset","plus","quality","sequence","set_offset","try_from","try_from","try_from","try_into","try_into","try_into","type_id","type_id","type_id","with_blocksize"],"q":["biommap","","","","","","","biommap::block","","","","","","","","","","","","","biommap::error","","","","","","","","","","","","","","","","","","","","","biommap::error::Error","","","biommap::fasta","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","biommap::fastq","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Define default blocksize","Struct that extract part of file (called block) and read …","Error struct of project biommap","Struct that extract part of file (called block) and read …","Struct that extract part of file (called block) and read …","Macro that generate a Block Producer struct.","Macro that generate a Reader struct.","Block reperesent a section of file memory mapped in file","","","Acces to data owned by block","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Return true if the block is empty","Get length of block","Create a new Block","","","","Enum to manage error","Can’t map file in memory","Missing metadata file","biommap didn’t find a new line in block, extend block …","File seems not containts fasta data","File seems not containts fastq data","Can’t open file","Current record seems to be a partial record","Alias of result","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","Original error","Original error","Original error","$name to produce block","$name is a reader struct","Struct that store a fasta record","Get blocksize","","","","","","","Fasta comment without <code>&gt;</code>","Search the begin of the partial record at the end of Block","Get file","Get file length","Get file size","Fix blocksize to file size in file size is lower than …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","A utils function to get range of the next line","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new Block producer","Create a new $name","","Get next block","Get the next available record","Get current value of offset","Fasta sequence","Set value of offset","","","","","","","","","","Create a new Block producer with a blocksize choose by user","$name to produce block","$name is a reader struct","Strutt that store a fastq record","Get blocksize","","","","","","","Fastq comment, without <code>&gt;</code>","Search the begin of the partial record at the end of Block","Get file","Get file length","Get file size","Fix blocksize to file size in file size is lower than …","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","A utils function to get range of the next line","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Create a new Block producer","Create a new $name","","Get next block","Get the next available record","Get current value of offset","Fastq plus line, without <code>&gt;</code>","Fastq quality","Fastq sequence","Set value of offset","","","","","","","","","","Create a new Block producer with a blocksize choose by user"],"i":[0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,9,9,9,9,9,9,9,0,9,9,9,9,9,9,9,9,9,9,9,9,24,25,26,0,0,0,14,20,14,19,20,14,19,20,14,14,14,14,14,20,14,19,19,20,14,19,14,14,19,14,14,19,14,20,14,20,14,19,20,14,19,20,14,19,14,0,0,0,21,23,21,22,23,21,22,23,21,21,21,21,21,23,21,22,22,23,21,22,21,21,22,21,21,22,21,23,23,23,21,23,21,22,23,21,22,23,21,22,21],"f":[0,0,0,0,0,0,0,0,[[]],[[]],[1],[[1,2],3],[[]],[[]],[1,4],[1,5],[[5,6],1],[[],7],[[],7],[[],8],0,0,0,0,0,0,0,0,0,[[]],[[]],[[9,2],3],[[9,2],3],[[]],[[]],[10],[9,[[12,[11]]]],[[],13],[[],7],[[],7],[[],8],0,0,0,0,0,0,[14,15],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],[[16,[15]]]],[14,17],[14,15],[[],[[16,[15]]]],[15,[[16,[15]]]],[[]],[[]],[[]],[[1,5],[[16,[[18,[5]]]]]],[[]],[[]],[[]],[[]],[[],[[16,[14]]]],[1,19],[14,12],[14,[[16,[[12,[1]]]]]],[19,[[16,[[12,[20]]]]]],[14,15],0,[[14,15]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[15,[[16,[14]]]],0,0,0,[21,15],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],[[16,[15]]]],[21,17],[21,15],[[],[[16,[15]]]],[15,[[16,[15]]]],[[]],[[]],[[]],[[1,5],[[16,[[18,[5]]]]]],[[]],[[]],[[]],[[]],[[],[[16,[21]]]],[1,22],[21,12],[21,[[16,[[12,[1]]]]]],[22,[[16,[[12,[23]]]]]],[21,15],0,0,0,[[21,15]],[[],7],[[],7],[[],7],[[],7],[[],7],[[],7],[[],8],[[],8],[[],8],[15,[[16,[21]]]]],"p":[[3,"Block"],[3,"Formatter"],[6,"Result"],[15,"bool"],[15,"usize"],[3,"Mmap"],[4,"Result"],[3,"TypeId"],[4,"Error"],[3,"Demand"],[8,"Error"],[4,"Option"],[3,"String"],[3,"Producer"],[15,"u64"],[6,"Result"],[3,"File"],[3,"Range"],[3,"Reader"],[3,"Record"],[3,"Producer"],[3,"Reader"],[3,"Record"],[13,"MetaDataFile"],[13,"OpenFile"],[13,"MapFile"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
